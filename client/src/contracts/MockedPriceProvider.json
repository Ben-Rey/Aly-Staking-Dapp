{
  "contractName": "MockedPriceProvider",
  "abi": [
    {
      "inputs": [],
      "name": "getLatestETHUSDPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "getLatestBYXUSDPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function",
      "constant": true
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getLatestBYXUSDPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestETHUSDPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getLatestBYXUSDPrice()\":{\"details\":\"Return mocked BYXUSD price\",\"returns\":{\"_0\":\"Returns the mocked BYXUSD price\"}},\"getLatestETHUSDPrice()\":{\"details\":\"Return mocked ETHUSD price\",\"returns\":{\"_0\":\"Returns the mocked ETHUSD price\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is a mocked contract of PriceProvider.sol As PriceProvider.sol can work only on Kovan network, we need to mock his functions for local network testing purpose.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/MockedPriceProvider.sol\":\"MockedPriceProvider\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/MockedPriceProvider.sol\":{\"keccak256\":\"0xa382a5cd8b602b967779b9b734402ff343791fead3f16f708865d2af4ef3036d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://974c10b95cc07067700fc4c1895a1655de51cbcb1eb0a2c853553c5768157a2e\",\"dweb:/ipfs/QmUnFLxwDtD1MftEbthaP58uZdB9fQJLwBSo4fRQpssK1K\"]},\"project:/contracts/interfaces/IPriceProvider.sol\":{\"keccak256\":\"0x97ec4e83449d118e5e0fabadd6a1cf63484115e86434f3dc03be70475cb01d61\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db2e808b67c26b69a304c958d6a484b19d8bcf45311e444dc873ee406883c3d8\",\"dweb:/ipfs/QmPv4LC6KrYGaGGP88xDQkjJAhFNVK4BWWWb8Dr5KoR6dK\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060f28061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80636aa83fea1460375780639f1eaa17146051575b600080fd5b603d606b565b6040516048919060a3565b60405180910390f35b6057607c565b6040516062919060a3565b60405180910390f35b60006863f18fbb0228850000905090565b6000677ef4398825460000905090565b6000819050919050565b609d81608c565b82525050565b600060208201905060b660008301846096565b9291505056fea26469706673582212207affe4d4d9c3de9e9c3c9c2ce429c8fbcca25c28957309cfdb19a4665016367d64736f6c634300080e0033",
  "deployedBytecode": "0x6080604052348015600f57600080fd5b506004361060325760003560e01c80636aa83fea1460375780639f1eaa17146051575b600080fd5b603d606b565b6040516048919060a3565b60405180910390f35b6057607c565b6040516062919060a3565b60405180910390f35b60006863f18fbb0228850000905090565b6000677ef4398825460000905090565b6000819050919050565b609d81608c565b82525050565b600060208201905060b660008301846096565b9291505056fea26469706673582212207affe4d4d9c3de9e9c3c9c2ce429c8fbcca25c28957309cfdb19a4665016367d64736f6c634300080e0033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:431:14",
        "statements": [
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "51:32:14",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "61:16:14",
                  "value": {
                    "name": "value",
                    "nodeType": "YulIdentifier",
                    "src": "72:5:14"
                  },
                  "variableNames": [
                    {
                      "name": "cleaned",
                      "nodeType": "YulIdentifier",
                      "src": "61:7:14"
                    }
                  ]
                }
              ]
            },
            "name": "cleanup_t_int256",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "33:5:14",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "cleaned",
                "nodeType": "YulTypedName",
                "src": "43:7:14",
                "type": ""
              }
            ],
            "src": "7:76:14"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "152:52:14",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "169:3:14"
                      },
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "191:5:14"
                          }
                        ],
                        "functionName": {
                          "name": "cleanup_t_int256",
                          "nodeType": "YulIdentifier",
                          "src": "174:16:14"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "174:23:14"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "162:6:14"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "162:36:14"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "162:36:14"
                }
              ]
            },
            "name": "abi_encode_t_int256_to_t_int256_fromStack",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "140:5:14",
                "type": ""
              },
              {
                "name": "pos",
                "nodeType": "YulTypedName",
                "src": "147:3:14",
                "type": ""
              }
            ],
            "src": "89:115:14"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "306:122:14",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "316:26:14",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "328:9:14"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "339:2:14",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "324:3:14"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "324:18:14"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "316:4:14"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "value0",
                        "nodeType": "YulIdentifier",
                        "src": "394:6:14"
                      },
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "407:9:14"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "418:1:14",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "403:3:14"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "403:17:14"
                      }
                    ],
                    "functionName": {
                      "name": "abi_encode_t_int256_to_t_int256_fromStack",
                      "nodeType": "YulIdentifier",
                      "src": "352:41:14"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "352:69:14"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "352:69:14"
                }
              ]
            },
            "name": "abi_encode_tuple_t_int256__to_t_int256__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "278:9:14",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "290:6:14",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "301:4:14",
                "type": ""
              }
            ],
            "src": "210:218:14"
          }
        ]
      },
      "contents": "{\n\n    function cleanup_t_int256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_int256_to_t_int256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_int256(value))\n    }\n\n    function abi_encode_tuple_t_int256__to_t_int256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_int256_to_t_int256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n",
      "id": 14,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "sourceMap": "288:482:9:-:0;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "288:482:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;450:103;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;668:100;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;450:103;503:6;528:18;521:25;;450:103;:::o;668:100::-;721:6;746:15;739:22;;668:100;:::o;7:76:14:-;43:7;72:5;61:16;;7:76;;;:::o;89:115::-;174:23;191:5;174:23;:::i;:::-;169:3;162:36;89:115;;:::o;210:218::-;301:4;339:2;328:9;324:18;316:26;;352:69;418:1;407:9;403:17;394:6;352:69;:::i;:::-;210:218;;;;:::o",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\nimport \"./interfaces/IPriceProvider.sol\";\n\n/**\n * This contract is a mocked contract of PriceProvider.sol\n * As PriceProvider.sol can work only on Kovan network, we need to mock his functions for local network testing purpose.\n */\ncontract MockedPriceProvider is IPriceProvider{\n\n    /**\n     * @dev Return mocked ETHUSD price\n     *\n     * @return Returns the mocked ETHUSD price\n     */\n    function getLatestETHUSDPrice() public pure returns (int256) {\n        return 1843634 * 10 ** 15;\n    }\n\n    /**\n     * @dev Return mocked BYXUSD price\n     *\n     * @return Returns the mocked BYXUSD price\n     */\n    function getLatestBYXUSDPrice() public pure returns (int256) {\n        return 9148 * 10 ** 15;\n    }\n}\n",
  "sourcePath": "/home/jack/Dev/PROJEX/4_Alyra_Projet_deFi_Staking_App/truffle/contracts/MockedPriceProvider.sol",
  "ast": {
    "absolutePath": "project:/contracts/MockedPriceProvider.sol",
    "exportedSymbols": {
      "IPriceProvider": [
        2084
      ],
      "MockedPriceProvider": [
        1895
      ]
    },
    "id": 1896,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1864,
        "literals": [
          "solidity",
          "0.8",
          ".14"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:9"
      },
      {
        "absolutePath": "project:/contracts/interfaces/IPriceProvider.sol",
        "file": "./interfaces/IPriceProvider.sol",
        "id": 1865,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1896,
        "sourceUnit": 2085,
        "src": "57:41:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 1867,
              "name": "IPriceProvider",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2084,
              "src": "320:14:9"
            },
            "id": 1868,
            "nodeType": "InheritanceSpecifier",
            "src": "320:14:9"
          }
        ],
        "canonicalName": "MockedPriceProvider",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 1866,
          "nodeType": "StructuredDocumentation",
          "src": "100:187:9",
          "text": " This contract is a mocked contract of PriceProvider.sol\n As PriceProvider.sol can work only on Kovan network, we need to mock his functions for local network testing purpose."
        },
        "fullyImplemented": true,
        "id": 1895,
        "linearizedBaseContracts": [
          1895,
          2084
        ],
        "name": "MockedPriceProvider",
        "nameLocation": "297:19:9",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "baseFunctions": [
              2077
            ],
            "body": {
              "id": 1880,
              "nodeType": "Block",
              "src": "511:42:9",
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_rational_1843634000000000000000_by_1",
                      "typeString": "int_const 1843634000000000000000"
                    },
                    "id": 1878,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "leftExpression": {
                      "hexValue": "31383433363334",
                      "id": 1874,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "528:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1843634_by_1",
                        "typeString": "int_const 1843634"
                      },
                      "value": "1843634"
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "*",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_rational_1000000000000000_by_1",
                        "typeString": "int_const 1000000000000000"
                      },
                      "id": 1877,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "leftExpression": {
                        "hexValue": "3130",
                        "id": 1875,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "538:2:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_10_by_1",
                          "typeString": "int_const 10"
                        },
                        "value": "10"
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "**",
                      "rightExpression": {
                        "hexValue": "3135",
                        "id": 1876,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "544:2:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_15_by_1",
                          "typeString": "int_const 15"
                        },
                        "value": "15"
                      },
                      "src": "538:8:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1000000000000000_by_1",
                        "typeString": "int_const 1000000000000000"
                      }
                    },
                    "src": "528:18:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1843634000000000000000_by_1",
                      "typeString": "int_const 1843634000000000000000"
                    }
                  },
                  "functionReturnParameters": 1873,
                  "id": 1879,
                  "nodeType": "Return",
                  "src": "521:25:9"
                }
              ]
            },
            "documentation": {
              "id": 1869,
              "nodeType": "StructuredDocumentation",
              "src": "341:104:9",
              "text": " @dev Return mocked ETHUSD price\n @return Returns the mocked ETHUSD price"
            },
            "functionSelector": "6aa83fea",
            "id": 1881,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getLatestETHUSDPrice",
            "nameLocation": "459:20:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1870,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "479:2:9"
            },
            "returnParameters": {
              "id": 1873,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1872,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1881,
                  "src": "503:6:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 1871,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "503:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "502:8:9"
            },
            "scope": 1895,
            "src": "450:103:9",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              2083
            ],
            "body": {
              "id": 1893,
              "nodeType": "Block",
              "src": "729:39:9",
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_rational_9148000000000000000_by_1",
                      "typeString": "int_const 9148000000000000000"
                    },
                    "id": 1891,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "leftExpression": {
                      "hexValue": "39313438",
                      "id": 1887,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "746:4:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_9148_by_1",
                        "typeString": "int_const 9148"
                      },
                      "value": "9148"
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "*",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_rational_1000000000000000_by_1",
                        "typeString": "int_const 1000000000000000"
                      },
                      "id": 1890,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "leftExpression": {
                        "hexValue": "3130",
                        "id": 1888,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "753:2:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_10_by_1",
                          "typeString": "int_const 10"
                        },
                        "value": "10"
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "**",
                      "rightExpression": {
                        "hexValue": "3135",
                        "id": 1889,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "759:2:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_15_by_1",
                          "typeString": "int_const 15"
                        },
                        "value": "15"
                      },
                      "src": "753:8:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1000000000000000_by_1",
                        "typeString": "int_const 1000000000000000"
                      }
                    },
                    "src": "746:15:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_9148000000000000000_by_1",
                      "typeString": "int_const 9148000000000000000"
                    }
                  },
                  "functionReturnParameters": 1886,
                  "id": 1892,
                  "nodeType": "Return",
                  "src": "739:22:9"
                }
              ]
            },
            "documentation": {
              "id": 1882,
              "nodeType": "StructuredDocumentation",
              "src": "559:104:9",
              "text": " @dev Return mocked BYXUSD price\n @return Returns the mocked BYXUSD price"
            },
            "functionSelector": "9f1eaa17",
            "id": 1894,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getLatestBYXUSDPrice",
            "nameLocation": "677:20:9",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1883,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "697:2:9"
            },
            "returnParameters": {
              "id": 1886,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1885,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1894,
                  "src": "721:6:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 1884,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "721:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "720:8:9"
            },
            "scope": 1895,
            "src": "668:100:9",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 1896,
        "src": "288:482:9",
        "usedErrors": []
      }
    ],
    "src": "32:739:9"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.14+commit.80d49f37.Emscripten.clang"
  },
  "networks": {
    "1659798950671": {
      "events": {
        "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        }
      },
      "links": {},
      "address": "0xB3c36Fb73BF283688e40EB538Ba7F7Ddc526281D",
      "transactionHash": "0x38013330d5484ae93915b3ce859de72558aad8d669da1eb24992c64ea99d2388"
    },
    "1659858912572": {
      "events": {},
      "links": {},
      "address": "0x4Ecfe65206E3388933032FF7Ef392DD304Dda6c7",
      "transactionHash": "0xa95bb69b75ea0a0200641e0c276f61bad6aba47cc7be9c4fa8d443ee4f61c7f0"
    }
  },
  "schemaVersion": "3.4.7",
  "updatedAt": "2022-08-07T08:14:38.271Z",
  "networkType": "ethereum",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getLatestBYXUSDPrice()": {
        "details": "Return mocked BYXUSD price",
        "returns": {
          "_0": "Returns the mocked BYXUSD price"
        }
      },
      "getLatestETHUSDPrice()": {
        "details": "Return mocked ETHUSD price",
        "returns": {
          "_0": "Returns the mocked ETHUSD price"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is a mocked contract of PriceProvider.sol As PriceProvider.sol can work only on Kovan network, we need to mock his functions for local network testing purpose.",
    "version": 1
  }
}